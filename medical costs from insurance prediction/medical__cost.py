# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bJ4lQlyRhkMbyIzFogoSbLLfucPwcF7g
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
plt.rcParams['figure.figsize']=[15,8]
plt.rcParams['font.size']=14
plt.rcParams['font.weight']='bold'
plt.style.use('fivethirtyeight')

data=pd.read_csv('insurance.csv')

data

sns.lmplot(x='bmi', y='charges',data=data, aspect=2, height=6, )
plt.xlabel('Body Mass Index(as independent var)')
plt.ylabel('Charges(as dependent var)')
plt.title('Charges vs Body Mass Index')

data.describe()

plt.figure(figsize=(15,6))
sns.heatmap(data.isnull(), cbar=False, cmap='viridis', yticklabels=False)
plt.title('Missing Values')

corr= data.select_dtypes(include=[np.number]).corr()
sns.heatmap(corr, annot=True, cmap='coolwarm')

# data['charges']=np.log(data['charges'])
data.hist(figsize=(15,7))

f= plt.figure(figsize=(14,6))
ax=f.add_subplot(121)
sns.violinplot(data=data, x='sex', y='charges', ax=ax,palette='Wistia' )
ax.set_title('Sex vs Charges')
ax=f.add_subplot(122)
sns.violinplot(data=data, x='smoker', y='charges',palette='magma', ax=ax)
ax.set_title('Smoker vs Charges')

plt.figure(figsize=(14,6))
sns.boxplot(data=data,x='children',y='charges',hue='sex' ,palette='rainbow')
plt.title('Children vs Charges')

numerical_data = data.select_dtypes(include=[np.number])
sns.heatmap(numerical_data.corr(), annot=True, cmap='coolwarm')
numerical_data.groupby('children').agg(['mean','min','max'])['charges']

numerical_data

sns.violinplot(data=data, x='region', y='charges',hue='sex',palette='magma',split=True)

f= plt.figure(figsize=(17,8))
ax=f.add_subplot(121)
sns.scatterplot(data=data, x='age',y='charges',hue='smoker',palette="magma",ax=ax)
ax.set_title('age vs Charges')

f= plt.figure(figsize=(17,8))
ax=f.add_subplot(122)
sns.scatterplot(data=data, x='bmi',y='charges',hue='smoker',palette="magma",ax=ax)
ax.set_title('bmi vs Charges')

data

columns=['sex','children','smoker','region']
data_encoding=pd.get_dummies(data=data, drop_first=True,columns=columns, dtype='int8',prefix='OHE',prefix_sep='_' )
data_encoding

print('columns in orginal data frame',data.columns.values)
print('\nno. of rows and colmuns in the dataset ',data.shape)
print('\ncolumns in encoding data frame',data_encoding.columns)
print('\nno. of rows and colmuns in the dataset ',data_encoding.shape)

data_encoding['charges']=np.log(data_encoding['charges'])
data_encoding

from sklearn.model_selection import train_test_split
X= data_encoding.drop('charges',axis=1)
y=data_encoding['charges']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=23)

X_train_0=np.c_[np.ones((X_train.shape[0],1)),X_train]
X_test_0=np.c_[np.ones((X_test.shape[0],1)),X_test]
# build model
# finding theta
theta = np.matmul(np.linalg.inv(np.matmul(X_train_0.T,X_train_0)),np.matmul(X_train_0.T,y_train))

# parameter for LM
Parameter=['theta_'+str(i) for i in range(X_train_0.shape[1])]
columns= ['intersect:X_0=1']+list(X.columns.values)
para_data = pd.DataFrame({'parameter':Parameter,'columns':columns,'theta':theta })
para_data

from sklearn.linear_model import LinearRegression
reg= LinearRegression()
reg.fit(X_train,y_train)

# parameter
sk_theta = [reg.intercept_]+list(reg.coef_)
para_data= para_data.join(pd.Series(sk_theta, name='sk_theta'))
para_data

#normal
y_test_normal= np.matmul(X_test_0,theta)

#MSE
J_mse= np.mean((y_test_normal-y_test)**2)/ X_test_0.shape[0]
#r2
sse=np.mean((y_test_normal-y_test)**2)
sst= np.mean((y_test-y_test.mean())**2)
r2=1-(sse/sst)
r2, J_mse

y_pred_sk=reg.predict(X_test)
from sklearn.metrics import r2_score, mean_squared_error
r2_score(y_test,y_pred_sk), mean_squared_error(y_test,y_pred_sk)

reg.score(X_test,y_test)